const int ENCODER = 186 / (PI * 2.75);
const int LIGHT_BLUE = 15;
const int DARK_BLUE = 3;
const int RED = 37;
const int WHITE = 19;
const int PLAYER1 = 13;
const int PLAYER2 = 23;
int arr[3][3];
int x, y;

void configureSensors() {
  SensorType[S4] = sensorEV3_Gyro;
  wait1Msec(50);
  SensorType[SZ] = sensorEV3_Touch;
  wait1Msec(50);
  SensorType[S3] = sensorEV3_Color;
  wait1Msec(56);

  SensorMode[S4] = modeEV3Gyro_Calibration;
  wait1Msec(50);
  SensorMode[S4] = modeEV3Gyro_RateAndAngle;
  wait1Msec(50);
  SensorMode[S3] = modeEV3Color_Reflected;
  wait1Msec(50);
}

void go(int motorPower) {
  motor[motorA] = motor[motorD] = motorPower;
}

void rotate(int angle) {
  motor[motorA] = 25;
  motor[motorD] = -25;
  resetGyro(S4);
  while (abs(getGyroDegrees(S4)) < abs(angle)) {}
  go(0);
}

void activateClaw(int clawPower) {
  time1[T1] = 0;
  motor[motorB] = clawPower;
  while (time1[T1] <= 1500) {}
  motor[motorB] = 0;
}

void encoderDist(int speed, int distance) {
  nMotorEncoder[motorA] = 0;
  go(speed);
  while (abs(nMotorEncoder[motorA]) < distance * ENCODER) {}
  go(0);
}

void getChecker() {
  activateClaw(30);
  go(30);
  while (SensorValue[S2] != 1) {}
  go(0);
  activateClaw(-30);
  encoderDist(-20, 26);
  rotate(85);
  go(30);
  while (abs(SensorValue[S3] - LIGHT_BLUE) >= 3) {}
  go(0);
}

void goHome() {
  while (abs(SensorValue[S3] - WHITE) >= 5) {}
  rotate(260);
  go(30);
  activateClaw(-30);
  while (abs(SensorValue[S3] - RED) >= 1) {}
  go(0);
  rotate(80);
}

void drive(int x, int y) {
  getChecker();
  go(30);
  for (int index = 1; index <= (2 - x); index++) {
    while (abs(SensorValue[S3] - DARK_BLUE) >= 1) {}
    while (abs(SensorValue[S3] - DARK_BLUE) <= 1) {}
  }
  encoderDist(20, 30);
  rotate(260);
  go(-30);
  for (int index = 1; index <= (2 - y); index++) {
    while (abs(SensorValue[S3] - DARK_BLUE) >= 1) {}
    while (abs(SensorValue[S3] - DARK_BLUE) <= 1) {}
  }
  wait1Msec(850);
  activateClaw(39);
  goHome();
}

void humanInput(int& index) {
  int player;
  if (index % 2 == 0) {
   
player = PLAYER2;
else
    player = PLAYER1;

while(lgetButtonPress(buttonAny))
{
    // do nothing while any button is being pressed
}

if(getButtonPress(buttonEnter))
{
    x = 1;
    y = 1;
    while(getButtonPress(buttonEnter))
    {
        // do nothing while the Enter button is being pressed
    }
}

if(getButtonPress(buttonUp))
{
    x = 0;
    y = 1;
    while(getButtonPress(buttonUp))
    {
        // do nothing while the Up button is being pressed
    }
}
else if(getButtonPress(buttonDown))
{
    x = 2;
    y = 1;
    while(getButtonPress(buttonDown))
    {
        // do nothing while the Down button is being pressed
    }
}

if(getButtonPress(buttonRight))
{
    waithsec(2500);
    if(getButtonPress(buttonUp))
    {
        x = 0;
        y = 2;
        while(getButtonPress(buttonUp))
        {
            // do nothing while the Up button is being pressed
        }
    }
    else if(getButtonPress(buttonDown))
    {
        x = 2;
        y = 2;
        while(getButtonPress(buttonDown))
        {
            // do nothing while the Down button is being pressed
        }
    }
    else
    {
        x = 1;
        y = 2;
        while(getButtonPress(buttonRight))
        {
            // do nothing while the Right button is being pressed
        }
    }

    if(getButtonPress(buttonLeft))
    {
        waithsec(2500);
        if(getButtonPress(buttonUp))
        {
            x = 0;
            y = 0;
            while(getButtonPress(buttonUp))
            {
                // do nothing while the Up button is being pressed
            }
        }
        else if(getButtonPress(buttonDown))
        {
            x = 2;
            y = 0;
            while(getButtonPress(buttonDown))
            {
                // do nothing while the Down button is being pressed
            }
        }
        else
        {
            x = 1;
            y = 0;
        }
        while(getButtonPress(buttonLeft))
        {
            // do nothing while the Left button is being pressed
        }
    }

    if(arr[x][y] != PLAYER1 && arr[x][y] != PLAYER2)
    {
        drive(x, y);
        arr[x][y] = player;
    }
    else
    {
        displayString(10, "TRY AGAIN");
        index--;
    }
}

bool winGame(int index)
{
    int diagonal = 0;
    bool horizontal = false;
    bool vertical = false;
    bool diagonall = false;
    bool gamewin = false;
    int player;

    if(index % 2 == 0)
    {
        player = PLAYER2;
    }
    else
    {
        player = PLAYER1;
    }
  
}
player = PLAYER2;
else {
    player = PLAYER1;
}

while(lgetButtonPress(buttonAny)) {}

if(getButtonPress(buttonEnter)) {
    x = 1;
    y = 1;
    while(getButtonPress(buttonEnter)) {}
}

if(getButtonPress(buttonUp)) {
    x = 0;
    y = 1;
    while(getButtonPress(buttonUp)) {}
}

if(getButtonPress(buttonDown)) {
    x = 2;
    y = 1;
    while(getButtonPress(buttonDown)) {}
}

if(getButtonPress(buttonRight)) {
    waithsec(2500);
    if(getButtonPress(buttonUp)) {
        x = 0;
        y = 2;
        while(getButtonPress(buttonUp)) {}
    }
    else if (getButtonPress(buttonDown)) {
        x = 2;
        y = 2;
        while(getButtonPress(buttonDown)) {}
    }
    else {
        x = 1;
        y = 2;
        while(getButtonPress(buttonRight)) {}
    }
}

if(getButtonPress(buttonLeFt)) {
    waithsec(2500);
    if(getButtonPress(buttonUp)) {
        x = 0;
        y = 0;
        while(getButtonPress(buttonUp)) {}
    }
    else if (getButtonPress(buttonDown)) {
        x = 2;
        y = 0;
        while(getButtonPress(buttonDown)) {}
    }
    else {
        x = 1;
        y = 0;
    }
    while(getButtonPress(buttonLeft)) {}
}

if (arr[x][y] != PLAYER1 && arr[x][y] != PLAYER2) {
    drive(x, y);
    arr[x][y] = player;
}
else {
    displayString(10, "TRY AGAIN");
    index--;
}

bool winGame(int index) {
    int diagonal = 0;
    bool horizontal = false;
    bool vertical = false;
    bool diagonall = false;
    bool gamewin = false;
    int player;

    if (index % 2 == 0) {
        player = PLAYER2;
    }
    else {
        player = PLAYER1;
    }

    for(int a = 0; a < 3; a++) {
        if(arr[a][a] == player) {
            diagonal++;
        }

        if (arr[a][a] == player && arr[1][a] == arr[a][a] && arr[2][a] == arr[1][a]) {
            vertical = true;
        }

        if (arr[a][e] == player && arr[a][1] == arr[a][e] && arr[a][2] == arr[a][1]) {
            horizontal = true;
        }

        if (arr[a][z] == player && arr[1][1] == arr[a][z] && arr[2][0] == arr[1][1]) {
            diagonall = true;
        }
    }

    if (diagonal == 3 || horizontal == 1 || diagonall == 1 || vertical == 1) {
        gamewin = true;
    }

    return gamewin;
}

task main() {
    configureSensors();
    displayString(2, "Start Game");

    for(int index = 1; index <= 9; index++) {
        index = 9;
        displayString(index + 2, "Move %d", index);
        humanInput(index);

        if(winGame(index)) {
            if(index % 2 != 0) {
                displayString(10,"PLAYER 2 NON!");
                                }
                            }
}
